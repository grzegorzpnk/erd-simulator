// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	OAuth2ClientcredentialsScopes = "oAuth2Clientcredentials.Scopes"
)

// Defines values for AccessType.
const (
	N3GPPACCESS   AccessType = "3GPP_ACCESS"
	NON3GPPACCESS AccessType = "NON_3GPP_ACCESS"
)

// Defines values for AmfEventTrigger.
const (
	CONTINUOUS AmfEventTrigger = "CONTINUOUS"
	ONETIME    AmfEventTrigger = "ONE_TIME"
)

// Defines values for AmfEventType.
const (
	ACCESSTYPEREPORT           AmfEventType = "ACCESS_TYPE_REPORT"
	COMMUNICATIONFAILUREREPORT AmfEventType = "COMMUNICATION_FAILURE_REPORT"
	CONNECTIVITYSTATEREPORT    AmfEventType = "CONNECTIVITY_STATE_REPORT"
	LOCATIONREPORT             AmfEventType = "LOCATION_REPORT"
	PRESENCEINAOIREPORT        AmfEventType = "PRESENCE_IN_AOI_REPORT"
	REACHABILITYREPORT         AmfEventType = "REACHABILITY_REPORT"
	REGISTRATIONSTATEREPORT    AmfEventType = "REGISTRATION_STATE_REPORT"
	SUBSCRIBEDDATAREPORT       AmfEventType = "SUBSCRIBED_DATA_REPORT"
	SUBSCRIPTIONIDADDITION     AmfEventType = "SUBSCRIPTION_ID_ADDITION"
	SUBSCRIPTIONIDCHANGE       AmfEventType = "SUBSCRIPTION_ID_CHANGE"
	TIMEZONEREPORT             AmfEventType = "TIMEZONE_REPORT"
	UESINAREAREPORT            AmfEventType = "UES_IN_AREA_REPORT"
)

var EVENT_TYPES = []AmfEventType{ACCESSTYPEREPORT, COMMUNICATIONFAILUREREPORT, CONNECTIVITYSTATEREPORT, LOCATIONREPORT,
	PRESENCEINAOIREPORT, REACHABILITYREPORT, REGISTRATIONSTATEREPORT, SUBSCRIBEDDATAREPORT, SUBSCRIPTIONIDADDITION,
	SUBSCRIPTIONIDCHANGE, TIMEZONEREPORT, UESINAREAREPORT}

// Defines values for AmfUpdateEventOptionItemOp.
const (
	AmfUpdateEventOptionItemOpReplace AmfUpdateEventOptionItemOp = "replace"
)

// Defines values for AmfUpdateEventSubscriptionItemInnerOp.
const (
	AmfUpdateEventSubscriptionItemInnerOpAdd     AmfUpdateEventSubscriptionItemInnerOp = "add"
	AmfUpdateEventSubscriptionItemInnerOpRemove  AmfUpdateEventSubscriptionItemInnerOp = "remove"
	AmfUpdateEventSubscriptionItemInnerOpReplace AmfUpdateEventSubscriptionItemInnerOp = "replace"
)

// Defines values for CmState.
const (
	CONNECTED CmState = "CONNECTED"
	IDLE      CmState = "IDLE"
)

// Defines values for LocationFilter.
const (
	CELLID  LocationFilter = "CELL_ID"
	N3IWF   LocationFilter = "N3IWF"
	TAI     LocationFilter = "TAI"
	UDPPORT LocationFilter = "UDP_PORT"
	UEIP    LocationFilter = "UE_IP"
)

// Defines values for PresenceState.
const (
	INACTIVE  PresenceState = "INACTIVE"
	INAREA    PresenceState = "IN_AREA"
	OUTOFAREA PresenceState = "OUT_OF_AREA"
	UNKNOWN   PresenceState = "UNKNOWN"
)

// Defines values for RmState.
const (
	DEREGISTERED RmState = "DEREGISTERED"
	REGISTERED   RmState = "REGISTERED"
)

// Defines values for SubscribedDataFilter.
const (
	RFSPINDEX SubscribedDataFilter = "RFSP_INDEX"
	SARI      SubscribedDataFilter = "SARI"
)

// Defines values for UeReachability.
const (
	REACHABLE      UeReachability = "REACHABLE"
	REGULATORYONLY UeReachability = "REGULATORY_ONLY"
	UNREACHABLE    UeReachability = "UNREACHABLE"
)


// AccessType defines model for AccessType.
type AccessType string

// AmfCreateEventSubscription defines model for AmfCreateEventSubscription.
type AmfCreateEventSubscription struct {
	Subscription      AmfEventSubscription `json:"subscription"`
	SupportedFeatures *string              `json:"supportedFeatures,omitempty"`
}

// AmfCreatedEventSubscription defines model for AmfCreatedEventSubscription.
type AmfCreatedEventSubscription struct {
	ReportList     *[]AmfEventReport    `json:"reportList,omitempty"`
	Subscription   AmfEventSubscription `json:"subscription"`
	SubscriptionId string               `json:"subscriptionId"`
	SupportedFeatures *string              `json:"supportedFeatures,omitempty"`
}

// AmfEvent defines model for AmfEvent.
type AmfEvent struct {
	AreaList                 *[]AmfEventArea         `json:"areaList,omitempty"`
	ImmediateFlag            *bool                   `json:"immediateFlag,omitempty"`
	LocationFilterList       *[]LocationFilter       `json:"locationFilterList,omitempty"`
	SubscribedDataFilterList *[]SubscribedDataFilter `json:"subscribedDataFilterList,omitempty"`
	Type                     AmfEventType            `json:"type"`
}

// AmfEventArea defines model for AmfEventArea.
type AmfEventArea struct {
	LadnInfo     *LadnInfo     `json:"ladnInfo,omitempty"`
	PresenceInfo *PresenceInfo `json:"presenceInfo,omitempty"`
}

// AmfEventMode defines model for AmfEventMode.
type AmfEventMode struct {
	Expiry     *time.Time      `json:"expiry,omitempty"`
	MaxReports *int32          `json:"maxReports,omitempty"`
	Trigger    AmfEventTrigger `json:"trigger"`
}

// AmfEventNotification defines model for AmfEventNotification.
type AmfEventNotification struct {
	NotifyCorrelationId           *string           `json:"notifyCorrelationId,omitempty"`
	ReportList                    *[]AmfEventReport `json:"reportList,omitempty"`
	SubsChangeNotifyCorrelationId *string           `json:"subsChangeNotifyCorrelationId,omitempty"`
}

// AmfEventReport defines model for AmfEventReport.
type AmfEventReport struct {
	AccessTypeList *[]AccessType         `json:"accessTypeList,omitempty"`
	AnyUe          *bool                 `json:"anyUe,omitempty"`
	AreaList       *[]AmfEventArea       `json:"areaList,omitempty"`
	CmInfoList     *[]CmInfo             `json:"cmInfoList,omitempty"`
	CommFailure    *CommunicationFailure `json:"commFailure,omitempty"`
	Gpsi           *string               `json:"gpsi,omitempty"`
	Location       *UserLocation         `json:"location,omitempty"`
	NumberOfUes    *int32                `json:"numberOfUes,omitempty"`
	Pei            *string               `json:"pei,omitempty"`
	Reachability   *UeReachability       `json:"reachability,omitempty"`
	RmInfoList     *[]RmInfo             `json:"rmInfoList,omitempty"`
	State          AmfEventState         `json:"state"`
	SubscribedData *SubscribedData       `json:"subscribedData,omitempty"`
	SubscriptionId *string               `json:"subscriptionId,omitempty"`
	Supi           *string               `json:"supi,omitempty"`
	TimeStamp      time.Time             `json:"timeStamp"`
	Timezone       *string               `json:"timezone,omitempty"`
	Type           AmfEventType          `json:"type"`
}

// AmfEventState defines model for AmfEventState.
type AmfEventState struct {
	Active         bool   `json:"active"`
	RemainDuration *int32 `json:"remainDuration,omitempty"`
	RemainReports  *int32 `json:"remainReports,omitempty"`
}

// AmfEventSubscription defines model for AmfEventSubscription.
type AmfEventSubscription struct {
	AnyUE                         *bool         `json:"anyUE,omitempty"`
	EventList                     *[]AmfEvent   `json:"eventList,omitempty"`
	EventNotifyUri                string        `json:"eventNotifyUri"`
	Gpsi                          *string            `json:"gpsi,omitempty"`
	GroupId                       *string            `json:"groupId,omitempty"`
	NfId                          openapi_types.UUID `json:"nfId"`
	NotifyCorrelationId           string        `json:"notifyCorrelationId"`
	Options                       *AmfEventMode `json:"options,omitempty"`
	Pei                           *string       `json:"pei,omitempty"`
	SubsChangeNotifyCorrelationId *string            `json:"subsChangeNotifyCorrelationId,omitempty"`
	SubsChangeNotifyUri           *string            `json:"subsChangeNotifyUri,omitempty"`
	Supi                          *string            `json:"supi,omitempty"`
}

// AmfEventTrigger defines model for AmfEventTrigger.
type AmfEventTrigger string

// AmfEventType defines model for AmfEventType.
type AmfEventType string

// AmfUpdateEventOptionItem defines model for AmfUpdateEventOptionItem.
type AmfUpdateEventOptionItem struct {
	Op   AmfUpdateEventOptionItemOp `json:"op"`
	Path string                     `json:"path"`
	Value time.Time                  `json:"value"`
}

// AmfUpdateEventOptionItemOp defines model for AmfUpdateEventOptionItem.Op.
type AmfUpdateEventOptionItemOp string

// AmfUpdateEventSubscriptionItem defines model for AmfUpdateEventSubscriptionItem.
type AmfUpdateEventSubscriptionItem = []AmfUpdateEventSubscriptionItemInner

// AmfUpdateEventSubscriptionItemInner defines model for AmfUpdateEventSubscriptionItem_inner.
type AmfUpdateEventSubscriptionItemInner struct {
	Op    AmfUpdateEventSubscriptionItemInnerOp `json:"op"`
	Path  string                                `json:"path"`
	Value *AmfEvent                             `json:"value,omitempty"`
}

// AmfUpdateEventSubscriptionItemInnerOp defines model for AmfUpdateEventSubscriptionItemInner.Op.
type AmfUpdateEventSubscriptionItemInnerOp string

// AmfUpdatedEventSubscription defines model for AmfUpdatedEventSubscription.
type AmfUpdatedEventSubscription struct {
	Subscription AmfEventSubscription `json:"subscription"`
}

// CmInfo defines model for CmInfo.
type CmInfo struct {
	AccessType AccessType `json:"accessType"`
	CmState    CmState    `json:"cmState"`
}

// CmState defines model for CmState.
type CmState string

// CommunicationFailure defines model for CommunicationFailure.
type CommunicationFailure struct {
	NasReleaseCode *string    `json:"nasReleaseCode,omitempty"`
	RanReleaseCode *NgApCause `json:"ranReleaseCode,omitempty"`
}

// Ecgi defines model for Ecgi.
type Ecgi struct {
	EutraCellId string `json:"eutraCellId"`
	PlmnId      PlmnId `json:"plmnId"`
}

// EutraLocation defines model for EutraLocation.
type EutraLocation struct {
	AgeOfLocationInformation *int32           `json:"ageOfLocationInformation,omitempty"`
	Ecgi                     Ecgi             `json:"ecgi"`
	GeodeticInformation      *string          `json:"geodeticInformation,omitempty"`
	GeographicalInformation  *string          `json:"geographicalInformation,omitempty"`
	GlobalNgenbId            *GlobalRanNodeId `json:"globalNgenbId,omitempty"`
	Tai                      Tai              `json:"tai"`
	UeLocationTimestamp      *time.Time       `json:"ueLocationTimestamp,omitempty"`
}

// GNbId defines model for GNbId.
type GNbId struct {
	BitLength int32  `json:"bitLength"`
	GNBValue  string `json:"gNBValue"`
}

// GlobalRanNodeId defines model for GlobalRanNodeId.
type GlobalRanNodeId interface{}

// InvalidParam defines model for InvalidParam.
type InvalidParam struct {
	Param  string  `json:"param"`
	Reason *string `json:"reason,omitempty"`
}

// Ipv6Addr defines model for Ipv6Addr.
type Ipv6Addr = interface{}

// LadnInfo defines model for LadnInfo.
type LadnInfo struct {
	Ladn     string         `json:"ladn"`
	Presence *PresenceState `json:"presence,omitempty"`
}

// LocationFilter defines model for LocationFilter.
type LocationFilter string

// ModifySubscriptionRequest defines model for ModifySubscription_request.
type ModifySubscriptionRequest interface{}

// N3gaLocation defines model for N3gaLocation.
type N3gaLocation struct {
	N3IwfId    *string   `json:"n3IwfId,omitempty"`
	N3gppTai   *Tai      `json:"n3gppTai,omitempty"`
	PortNumber *int32    `json:"portNumber,omitempty"`
	UeIpv4Addr *string   `json:"ueIpv4Addr,omitempty"`
	UeIpv6Addr *Ipv6Addr `json:"ueIpv6Addr,omitempty"`
}

// Ncgi defines model for Ncgi.
type Ncgi struct {
	NrCellId string `json:"nrCellId"`
	PlmnId   PlmnId `json:"plmnId"`
}

// NgApCause defines model for NgApCause.
type NgApCause struct {
	Group int32 `json:"group"`
	Value int32 `json:"value"`
}

// NrLocation defines model for NrLocation.
type NrLocation struct {
	AgeOfLocationInformation *int32           `json:"ageOfLocationInformation,omitempty"`
	GeodeticInformation      *string          `json:"geodeticInformation,omitempty"`
	GeographicalInformation *string          `json:"geographicalInformation,omitempty"`
	GlobalGnbId             *GlobalRanNodeId `json:"globalGnbId,omitempty"`
	Ncgi                    Ncgi             `json:"ncgi"`
	Tai                     Tai              `json:"tai"`
	UeLocationTimestamp     *time.Time       `json:"ueLocationTimestamp,omitempty"`
}

// PlmnId defines model for PlmnId.
type PlmnId struct {
	Mcc string `json:"mcc"`
	Mnc string `json:"mnc"`
}

// PresenceInfo defines model for PresenceInfo.
type PresenceInfo struct {
	EcgiList            *[]Ecgi            `json:"ecgiList,omitempty"`
	GlobalRanNodeIdList *[]GlobalRanNodeId `json:"globalRanNodeIdList,omitempty"`
	NcgiList            *[]Ncgi            `json:"ncgiList,omitempty"`
	PraId               *string            `json:"praId,omitempty"`
	PresenceState       *PresenceState     `json:"presenceState,omitempty"`
	TrackingAreaList    *[]Tai             `json:"trackingAreaList,omitempty"`
}

// PresenceState defines model for PresenceState.
type PresenceState string

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Cause         *string         `json:"cause,omitempty"`
	Detail        *string         `json:"detail,omitempty"`
	Instance      *string         `json:"instance,omitempty"`
	InvalidParams *[]InvalidParam `json:"invalidParams,omitempty"`
	Status        *int32          `json:"status,omitempty"`
	Title         *string         `json:"title,omitempty"`
	Type          *string         `json:"type,omitempty"`
}

// RmInfo defines model for RmInfo.
type RmInfo struct {
	AccessType AccessType `json:"accessType"`
	RmState    RmState    `json:"rmState"`
}

// RmState defines model for RmState.
type RmState string

// SubscribedData defines model for SubscribedData.
type SubscribedData struct {
	RfspIndex *int32  `json:"rfspIndex,omitempty"`
	Sari      *[]byte `json:"sari,omitempty"`
}

// SubscribedDataFilter defines model for SubscribedDataFilter.
type SubscribedDataFilter string

// Tai defines model for Tai.
type Tai struct {
	PlmnId PlmnId `json:"plmnId"`
	Tac    string `json:"tac"`
}

// UeReachability defines model for UeReachability.
type UeReachability string

// UserLocation defines model for UserLocation.
type UserLocation struct {
	EutraLocation *EutraLocation `json:"eutraLocation,omitempty"`
	N3gaLocation  *N3gaLocation  `json:"n3gaLocation,omitempty"`
	NrLocation    *NrLocation    `json:"nrLocation,omitempty"`
}

// CreateSubscriptionJSONBody defines parameters for CreateSubscription.
type CreateSubscriptionJSONBody = AmfCreateEventSubscription

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = CreateSubscriptionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Namf_EventExposure Subscribe service Operation
	// (POST /subscriptions)
	CreateSubscription(ctx echo.Context) error
	// Namf_EventExposure Unsubscribe service Operation
	// (DELETE /subscriptions/{subscriptionId})
	DeleteSubscription(ctx echo.Context, subscriptionId string) error
	// Namf_EventExposure Subscribe Modify service Operation
	// (PATCH /subscriptions/{subscriptionId})
	ModifySubscription(ctx echo.Context, subscriptionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2ClientcredentialsScopes, []string{"namf-evts"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSubscription(ctx)
	return err
}

// DeleteSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, ctx.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriptionId: %s", err))
	}

	ctx.Set(OAuth2ClientcredentialsScopes, []string{"namf-evts"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSubscription(ctx, subscriptionId)
	return err
}

// ModifySubscription converts echo context to params.
func (w *ServerInterfaceWrapper) ModifySubscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, ctx.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriptionId: %s", err))
	}

	ctx.Set(OAuth2ClientcredentialsScopes, []string{"namf-evts"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifySubscription(ctx, subscriptionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/subscriptions", wrapper.CreateSubscription)
	router.DELETE(baseURL+"/subscriptions/:subscriptionId", wrapper.DeleteSubscription)
	router.PATCH(baseURL+"/subscriptions/:subscriptionId", wrapper.ModifySubscription)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tdnm/wMAAP//BUUjtBfZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}